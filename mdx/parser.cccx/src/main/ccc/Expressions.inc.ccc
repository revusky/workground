/*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*   SmartCity Jena - initial
*   Stefan Bischof (bipolis.org) - initial
*/

// Breaking the expression logic out into a 
// separate INCLUDE

INJECT PARSER_CLASS :
  import org.eclipse.daanse.mdx.model.api.expression.CallExpression.Type;

INJECT BASE_NODE_CLASS :
{
  public List<Expression> expressions() {
    return Collections.unmodifiableList(childrenOfType(Expression.class));
  }
}  

INJECT Expression : extends org.eclipse.daanse.mdx.model.api.expression.Expression

Expression#interface :
  OrExpression
  (
    (
      < AS > 
      ObjectIdentifier
    )#BinaryExpression(+1)
  )*
;

INJECT interface ObjectIdentifier : extends Expression, org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier

ObjectIdentifier#interface :
  NameObjectIdentifier
  |
  KeyObjectIdentifier
;

INJECT interface NameObjectIdentifier : 
    extends ObjectIdentifier, 
            org.eclipse.daanse.mdx.model.api.expression.NameObjectIdentifier,
            org.eclipse.daanse.mdx.model.api.expression.SymbolLiteral

NameObjectIdentifier#interface :
  // It seems that some reserved words can act as identifiers under
  // some considerations, but of course, that is what the [...] is for, no?
  // This only seems to exist in the Pentaho grammar. REVISIT
  //<RESERVED_WORD>
  //|
  < ID > 
  |
  // Neither the Microsoft spec nor the Oracle spec makes any mention of this!  
  < AT_ID > 
  | 
  < QUOTED_ID >
;


INJECT KeyObjectIdentifier :
   implements ObjectIdentifier, org.eclipse.daanse.mdx.model.api.expression.KeyObjectIdentifier
{
   public java.util.List<NameObjectIdentifier> nameObjectIdentifiers() {
     return childrenOfType(NameObjectIdentifier.class);
   }

   @Override
   public Quoting quoting() {
       return Quoting.KEY;
   }
}

// for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
KeyObjectIdentifier :
  ( <AMP_QUOTED_ID> | <AMP_UNQUOTED_ID> )+
;


INJECT CompoundId : 
    import static PARSER_PACKAGE.PARSER_CLASS.stripQuotes;
    implements Expression, 
               org.eclipse.daanse.mdx.model.api.expression.CompoundId,
               org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
    public java.util.List<ObjectIdentifier> objectIdentifiers() {
       return childrenOfType(ObjectIdentifier.class);
    }

    public Type type() {
        String lastChild = getLastChild().getSource();
        if (lastChild.startsWith("[&")) return Type.PROPERTY_AMPERS_AND_QUOTED;
        char firstChar = lastChild.charAt(0);
        return firstChar == '[' ? Type.PROPERTY_QUOTED : Type.PROPERTY;
    }

    public String name() {
        String image = getLastChild().getSource();
        return switch (type()) {
           case PROPERTY_AMPERS_AND_QUOTED -> stripQuotes(image).substring(1);
           case PROPERTY_QUOTED -> stripQuotes(image);
           default -> image;
        };
    }
}  

CompoundId :
  ObjectIdentifier
  (
    < DOT > ObjectIdentifier
  )*
;

OrExpression#void :
  AndExpression
  (
    (
      (<OR>|<XOR>|<XOR>|<COLON>)
      AndExpression
    )#BinaryExpression(+1)
  )*
;


AndExpression#void :
  NegatedExpression 
  (
    (
      < AND > 
      NegatedExpression 
    )#BinaryExpression(+1)
  )*
;

INJECT NegatedExpression : 
    import java.util.List;
    implements Expression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
  public String name() {
    return "NOT";
  }
  
  public Type type() {
     return Type.TERM_PREFIX;
  }
}

NegatedExpression#(>1) :
  <NOT> NegatedExpression
  |
  RelationalExpression
;

INJECT RelationalExpression :
   import java.util.List;
   extends BinaryExpression
{
   public String name() {
      Node op = getChild(1);
      if (op.getType() == IS && op.nextSibling().getType() == EMPTY) {
         return "IS EMPTY";
      }
      else if (op.getType() == NOT) {
        NodeType nextType = op.nextSibling().getType();
        if (nextType ==MATCHES) return "NOT MATCHES";
        if (nextType == IN) return "NOT IN";
      }
      return super.name();
   }

   public Type type() {
      Node is = firstChildOfType(IS);
      if (is != null) {
         NodeType nextType = is.nextSibling().getType();
         if (nextType == NULL || nextType == EMPTY) return Type.TERM_POSTFIX;
      }
      return Type.TERM_INFIX;
   }

   public List<Expression> expressions() {
      if (type() == Type.TERM_POSTFIX) {
        return List.of((Expression) getFirstChild());
      }
      return super.expressions();
   }
}

RelationalExpression#(>1) :
  AdditiveExpression 
  (
    ( 
      < EQ > | < NE > | < LT > | < GT > | < LE > | < GE > | (<IS>[<EMPTY>]) | ([<NOT>] <MATCHES> =>||) | ([<NOT>] <IN> =>||)
    ) 
    (
      SCAN {getToken(0).getType()==EMPTY}# => {}
      |
      AdditiveExpression 
    )
  )?
;

AdditiveExpression#void :
  MultiplicativeExpression
  (
   (
    (
     <PLUS>
     |
     <MINUS>
     |
     // Only seems to be in Pentaho
     <CONCAT>
    )
    MultiplicativeExpression
   )#BinaryExpression(+1)
  )*
;

INJECT BinaryExpression :
    import java.util.List;
    implements Expression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
    public String name() {
       return getChild(1).getImage();
    }

    public Type type() {
       return Type.TERM_INFIX; 
    }

    public List<Expression> expressions() {
        return List.of((Expression) getFirstChild(), (Expression) getLastChild());
    }
}    

MultiplicativeExpression#void :
  UnaryExpression
  (
    (
      (<ASTERISK>|<SOLIDUS>) 
      UnaryExpression 
    )#BinaryExpression(+1)
  )*
;

INJECT UnaryExpression : 
    import java.util.List;
    implements Expression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
    public String name() {
       return getChild(0).getImage();
    }

    public Type type() {
       return Type.TERM_PREFIX; 
    }
}

UnaryExpression#(>1) :
    (
      <PLUS>
      |
      <MINUS>
      |
      // This is only in Pentaho, it seems.
      <EXISTING>
    )?
    PrimaryExpression
;    

INJECT PrimaryExpression : extends Expression

PrimaryExpression#interface :
    PrimaryPrefix
    (
      SCAN 1 {!(peekNode() instanceof CompoundId || peekNode() instanceof ObjectIdentifier || peekNode() instanceof QualifiedIdentifier)}
      => 
      <DOT> ObjectIdentifier #DotName(3)
      |
      SCAN 1 {peekNode() instanceof CompoundId 
              || peekNode() instanceof ObjectIdentifier 
              || peekNode() instanceof QualifiedIdentifier 
              || peekNode() instanceof DotName}
      =>
      (
          < LPAREN > 
          PossiblyEmptyExpression
          (< COMMA > PossiblyEmptyExpression)*
          < RPAREN >
      ) #FunctionCall(+1)
    )*
;

PrimaryPrefix#void :
      Literal 
      | 
      CastExpression
      |
      ExpressionList
      | 
      Tuple 
      | 
      CaseExpression 
      |
      QualifiedIdentifier
      |
      CompoundId
      {
        // If the CompoundId object has only
        // one child (which is a NameObjectIdentifier)
        // then just replace it with that in the tree.
        if (peekNode().getChildCount() ==1) {
          pokeNode(peekNode().getChild(0));
        }
      }
;

INJECT DotName : 
    implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
    public String name() {
        return getChild(2) instanceof NameObjectIdentifier noi ? noi.name() : null;
    }

    public Type type() {
       ObjectIdentifier oi = (ObjectIdentifier) getChild(2);
       return switch (oi.quoting()) {
			    case UNQUOTED -> Type.PROPERTY;
			    case QUOTED -> Type.PROPERTY_QUOTED;
          default-> Type.PROPERTY_AMPERS_AND_QUOTED;
			 };       
    }
}    
  
INJECT FunctionCall : 
    import java.util.List;
    implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
    public String name() {
        if (getChild(0) instanceof NameObjectIdentifier noi) return noi.name(); 
        if (getChild(0) instanceof CompoundId ci) return ci.getLastChild().toString();
        return null;
    }

    public Type type() {
       return getChild(0) instanceof NameObjectIdentifier noi ? Type.FUNCTION : Type.METHOD;
    }
    
    public List<Expression> expressions() {
       List<Expression> result = childrenOfType(Expression.class);
       // This is not supposed to include the LHS.
       result.remove(0);
       return result;
    }
}    
      
INJECT interface Literal : extends PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.Literal

Literal#interface :
    <STRING_LITERAL>
    |
    <UNSIGNED_INTEGER_LITERAL>
    |
    <DECIMAL_NUMERIC_LITERAL>
    |
    <APPROX_NUMERIC_LITERAL>
    |
    <NULL>
;

INJECT CastExpression :
    implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
    public String name() {
      return "CAST";
    }

    public Type type() {
      return Type.CAST;
    }
}

CastExpression :
    <CAST>
    <LPAREN>
    OrExpression
    <AS>
    NameObjectIdentifier 
    <RPAREN>
;

INJECT ExpressionList :
  implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
  public String name() {
    return "()";
  }

  public Type type() {
     return Type.PARENTHESES;
  }
}  

ExpressionList : 
   <LPAREN>
   Expression
   (<COMMA> Expression)*
   <RPAREN>
;

INJECT Tuple : 
  implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
{
  public String name() {
     return "{}";
  }

  public Type type() {
     return Type.BRACES;
  }
}  

Tuple :
  // set built from sets/tuples
  < LBRACE >
  (
    Expression
    (<COMMA> Expression)*
  )?
  < RBRACE >
;

INJECT QualifiedIdentifier : 
  implements PrimaryExpression
 
QualifiedIdentifier :
   NameObjectIdentifier
   =>|+1
      // We support the syntax for qualifying function names with package
      // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
      // but currently we ignore the qualifiers. The previous example is
      // equivalent to 'foo(a, b)'.
   (<BANG> NameObjectIdentifier)+
;   

INJECT EmptyExpression : implements Expression

EmptyExpression#(true) :
{
   CURRENT_NODE.setBeginOffset(lastConsumedToken.getEndOffset());
}
;

PossiblyEmptyExpression#void :
  Expression
  |
  EmptyExpression 
;

INJECT CaseExpression : 
   implements PrimaryExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression 
{
   public String name() {
      return (getChild(1) instanceof Expression) ? "_CaseMatch" : "_CaseTest";
   }

   public Type type() {
      return Type.TERM_CASE;
   }
}   

CaseExpression :
    < CASE >
    (
      Expression
    )?
    (
      < WHEN > Expression < THEN > Expression
    )*
    (
      < ELSE > Expression
    )?
    < END >
;

INJECT MemberPropertyDefinition :
  implements org.eclipse.daanse.mdx.model.api.select.MemberPropertyDefinition
{
    public ObjectIdentifier objectIdentifier() {
        return (ObjectIdentifier) getChild(0);
   }

   public Expression expression() {
      return (Expression) getChild(2);
   }
}

MemberPropertyDefinition :
  ObjectIdentifier 
  < EQ > 
  Expression
;

