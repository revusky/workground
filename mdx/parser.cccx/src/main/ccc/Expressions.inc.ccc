/*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*   SmartCity Jena - initial
*   Stefan Bischof (bipolis.org) - initial
*/

// Breaking the expression logic out into a 
// separate INCLUDE

INJECT PARSER_CLASS :
  import org.eclipse.daanse.mdx.model.api.expression.Expression;
  import org.eclipse.daanse.mdx.model.api.expression.CallExpression.Type;
  import org.eclipse.daanse.mdx.model.record.expression.CallExpressionR;
  import org.eclipse.daanse.mdx.model.record.expression.CompoundIdR;
{
	public static Expression createCall(Expression left, ObjectIdentifier objectIdentifier,
			List<Expression> expressions) {
		final String name = objectIdentifier instanceof NameObjectIdentifier nameObjectIdentifier
				?  nameObjectIdentifier.name()
				: null;
		if (expressions != null) {
			if (left != null) {
				// Method syntax: "x.foo(arg1, arg2)" or "x.foo()"
				expressions.add(0, left);
				return new CallExpressionR(name, Type.METHOD, expressions);
			} else {
				// Function syntax: "foo(arg1, arg2)" or "foo()"
				return new CallExpressionR(name, Type.FUNCTION, expressions);
			}
		} else {
			// Member syntax: "foo.bar"
			// or property syntax: "foo.RESERVED_WORD"
			Type type;
			boolean call = false;
			switch (objectIdentifier.quoting()) {
			case UNQUOTED:
				type = Type.PROPERTY;
				call = true;
				break;
			case QUOTED:
				type = Type.PROPERTY_QUOTED;
				break;
			default:
				type = Type.PROPERTY_AMPERS_AND_QUOTED;
				break;
			}
			if (left instanceof CompoundId compoundIdLeft && !call) {
				List<org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier> newObjectIdentifiers = new ArrayList<>();
        newObjectIdentifiers.addAll(compoundIdLeft.objectIdentifiers());
				newObjectIdentifiers.add(objectIdentifier);
				return new CompoundIdR(newObjectIdentifiers);
			} else if (left == null) {
				return new CompoundIdR(List.of(objectIdentifier));
			} else {
				return new CallExpressionR(name, type, List.of(left));
			}
		}
	}
}

//INJECT Expression : extends org.eclipse.daanse.model.api.Expression

Expression Expression#parseExpression :
{
  Expression expression;
  ObjectIdentifier objectIdentifier;
}
  expression = parseUnaliasedExpression
  (
    < AS > 
    objectIdentifier = ObjectIdentifier
    {
      CompoundIdR compoundId = new CompoundIdR(List.of(objectIdentifier));
      expression = new CallExpressionR("AS", Type.TERM_INFIX, List.of(
      expression, compoundId
      )
      );
    }
  )*
  {
    return expression;
  }
;


Expression parseExpressionOrEmpty :
{
  Expression expression;
}
  expression = Expression
  {
    return expression;
  }
  | /* empty */
  {
    return new CallExpressionR("", Type.EMPTY, List.of());
  }
;


// Comma-separated list of expressions, some of which may be empty. Used
// for functions.
List < Expression > expOrEmptyList :
{
  Expression expression;
  List < Expression > list = new LinkedList<>();
}
  expression = parseExpressionOrEmpty
  {
    list.add(expression);
  }
  (
    < COMMA >
    expression = parseExpressionOrEmpty
    {
      list.add(expression);
    }
  )*
  {
    return list;
  }
;


// List of expressions, none of which may be empty.
List < Expression > expList :
{
  Expression expression;
  List < Expression > list = new LinkedList<>();
}
  expression = Expression
  {
    list.add(expression);
  }
  (
    < COMMA >
    expression = Expression
    {
      list.add(expression);
    }
  )*
  {
    return list;
  }
;


Expression parseExpressionEof :
{
  Expression expression;
}
  expression = Expression < EOF >
  {
    return expression;
  }
;

INJECT ObjectIdentifier : extends org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier

ObjectIdentifier ObjectIdentifier#interface :
{
  ObjectIdentifier objectIdentifier;
}
  (
    objectIdentifier = NameObjectIdentifier
    |
    objectIdentifier = KeyObjectIdentifier
  )
  {
    return objectIdentifier;
  }
;

INJECT NameObjectIdentifier :
  implements org.eclipse.daanse.mdx.model.api.expression.SymbolLiteral,
             ObjectIdentifier
{
  @Property Quoting quoting = Quoting.UNQUOTED;
  @Property String name;
  public Quoting quoting() {return getQuoting();}
  public String name() {return getName();}
  public String value() {return getName();}
}

NameObjectIdentifier :
 (
  //parseKeyword {CURRENT_NODE.setName(getTokenImage(0));}
  //|
  < ID > {CURRENT_NODE.setName(getTokenImage(0));}
  |
  < ATSIGN > < ID > { CURRENT_NODE.setName("@" + getTokenImage(0)); }
  | 
  < QUOTED_ID >
  {
    String name = stripQuotes(getTokenImage(0));
    CURRENT_NODE.setName(name);
    CURRENT_NODE.setQuoting(ObjectIdentifier.Quoting.QUOTED);
  }
 )
;


INJECT KeyObjectIdentifier :
   import java.util.List;
   import java.util.ArrayList;
   import org.eclipse.daanse.mdx.model.api.expression.NameObjectIdentifier;
   implements ObjectIdentifier, org.eclipse.daanse.mdx.model.api.expression.KeyObjectIdentifier
{
   public List<NameObjectIdentifier> nameObjectIdentifiers() {
     return childrenOfType(NameObjectIdentifier.class);
   }

   @Override
   public Quoting quoting() {
       return Quoting.KEY;
   }
}

// for example '&foo&[1]&bar' in '[x].&foo&[1]&bar.[y]'
KeyObjectIdentifier :
  ( AmpId )+
;


AmpId#NameObjectIdentifier :
 (
  < AMP_QUOTED_ID >
  {
    String name = stripQuotes(getTokenImage(0).substring(1));
    CURRENT_NODE.setName(name);
    CURRENT_NODE.setQuoting(ObjectIdentifier.Quoting.QUOTED);
  }
  |
  < AMP_UNQUOTED_ID >
  {
    CURRENT_NODE.setName(getTokenImage(0).substring(1));
  }
 )
;


// a keyword that is not a RESERVED_WORD could be used as identifier
String parseKeyword :
  (
    < DIMENSION > | < PROPERTIES >
  )
  {
    return getTokenImage(0);
  }
;

INJECT CompoundId :
  import java.util.List;
  import java.util.ArrayList;
  import org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier;
  implements org.eclipse.daanse.mdx.model.api.expression.CompoundId
{
    public List<ObjectIdentifier> objectIdentifiers() {
       return childrenOfType(ObjectIdentifier.class);
    }
}  

CompoundId :
  ObjectIdentifier
  (
    < DOT > ObjectIdentifier
  )*
;

Expression parseUnaliasedExpression :
{
  Expression x;
  Expression y;
}
  x = parseTerm5
  (
    < OR > y = parseTerm5
    {
      x = new CallExpressionR("OR", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
    | 
    < XOR > y = parseTerm5
    {
      x = new CallExpressionR("XOR", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
    |
    // range 'm1 : m2' yields set of members
    < COLON > y = parseTerm5
    {
      x = new CallExpressionR(":", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression parseTerm5 :
{
  Expression x;
  Expression y;
}
  x = parseTerm4
  (
    < AND > y = parseTerm4
    {
      x = new CallExpressionR("AND", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression parseTerm4 :
{
  Expression x;
}
  x = parseTerm3
  {
    return x;
  }
  | 
  < NOT > x = parseTerm4
  {
    return new CallExpressionR("NOT", Type.TERM_PREFIX, List.of(
    x
    )
    );
  }
;


Expression parseTerm3 :
{
  Expression x;
  Expression y;
  Token op;
}
  x = parseTerm2
  (
    // e.g. "1 < 5"
    (
      < EQ >
      {
        op = getToken(0);
      }
    | < NE >
      {
        op = getToken(0);
      }
    | < LT >
      {
        op = getToken(0);
      }
    | < GT >
      {
        op = getToken(0);
      }
    | < LE >
      {
        op = getToken(0);
      }
    | < GE >
      {
        op = getToken(0);
      }
    )
    y = parseTerm2
    {
      x = new CallExpressionR(op.getImage(), Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  |
    // We expect a shift-reduce conflict here, because NULL is a literal and
    // so is a valid argument to the IS operator. We want to shift.
    SCAN 2 =>
    < IS > < NULL >
    {
      x = new CallExpressionR("IS NULL", Type.TERM_POSTFIX, List.of(
      x
      )
      );
    }
  |
    // e.g. "x IS y"; but "x IS NULL" is handled elsewhere
    SCAN 2 =>
    < IS > y = parseTerm2
    {
      x = new CallExpressionR("IS", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < IS > < EMPTY >
    {
      x = new CallExpressionR(
      "IS EMPTY", Type.TERM_POSTFIX, List.of(x));
    }
  | < MATCHES > y = parseTerm2
    {
      x = new CallExpressionR("MATCHES", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | SCAN 2 =>
    < NOT > < MATCHES > y = parseTerm2
    {
      x = new CallExpressionR(
      "NOT", Type.TERM_PREFIX, List.of(
      new CallExpressionR(
      "MATCHES", Type.TERM_INFIX, List.of(
      x, y
      )
      )
      )
      );
    }
  | < IN > y = parseTerm2
    {
      x = new CallExpressionR("IN", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < NOT > < IN > y = parseTerm2
    {
      x = new CallExpressionR(
      "NOT", Type.TERM_PREFIX, List.of(
      new CallExpressionR(
      "IN", Type.TERM_INFIX, List.of(
      x, y
      )
      )
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression parseTerm2 :
{
  Expression x;
  Expression y;
}
  x = parseTerm
  (
    < PLUS > y = parseTerm
    {
      x = new CallExpressionR("+", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
    | 
    < MINUS > y = parseTerm
    {
      x = new CallExpressionR("-", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < CONCAT > y = parseTerm
    {
      x = new CallExpressionR("||", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;


Expression parseTerm :
{
  Expression x;
  Expression y;
}
  x = parseFactor
  (
    < ASTERISK > y = parseFactor
    {
      x = new CallExpressionR("*", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  | < SOLIDUS > y = parseFactor
    {
      x = new CallExpressionR("/", Type.TERM_INFIX, List.of(
      x, y
      )
      );
    }
  )*
  {
    return x;
  }
;
Expression parseFactor :
{
  Expression p;
}
    p = PrimaryExpression
    {
      return p;
    }
  | < PLUS > p = PrimaryExpression
    {
      return p;
    }
  | < MINUS > p = PrimaryExpression
    {
      return new CallExpressionR("-", Type.TERM_PREFIX, List.of(
      p
      )
      );
    }
  | < EXISTING > p = PrimaryExpression
    {
      return new CallExpressionR("Existing", Type.TERM_PREFIX, List.of(
      p
      )
      );
    }
  ;

  INJECT PrimaryExpression : extends org.eclipse.daanse.mdx.model.api.expression.Expression

  PrimaryExpression#interface :
  {
    Expression expression;
  }
    expression = AtomicExpression
    (
      < DOT > 
      expression = objectIdentifierOrFuncall(expression)
    )*
  ;

  Expression objectIdentifierOrFuncall(Expression left) :
  {
    ObjectIdentifier objectIdentifier;
    List < Expression > argList = null;
  }
    objectIdentifier = ObjectIdentifier
    (
      < LPAREN >
      (
        argList = expOrEmptyList
      )
      < RPAREN >
    )?
    {
      return createCall(left, objectIdentifier, argList);
    }
  ;

  INJECT interface Literal : extends AtomicExpression, org.eclipse.daanse.mdx.model.api.expression.Literal

  Literal#interface :
    <STRING_LITERAL>
    |
    <UNSIGNED_INTEGER_LITERAL>
    |
    <DECIMAL_NUMERIC_LITERAL>
    |
    <APPROX_NUMERIC_LITERAL>
    |
    <NULL>
  ;

  INJECT CastExpression :
    import java.util.List;
    import org.eclipse.daanse.mdx.model.api.expression.Expression;
    implements AtomicExpression, org.eclipse.daanse.mdx.model.api.expression.CallExpression
  {
      @Property Expression expression;

      public String name() {
        return "CAST";
      }

      public Type type() {
        return Type.CAST;
      }

      public List<Expression> expressions() {
        NameObjectIdentifier noi = firstChildOfType(NameObjectIdentifier.class);
        return List.of(getExpression(), noi);
      }
  }

  CastExpression :
  {
    Expression expression;
  }
    <CAST>
    <LPAREN>
    expression = parseUnaliasedExpression
    {CURRENT_NODE.setExpression(expression);}
    <AS>
    NameObjectIdentifier 
    <RPAREN>
  ;

  Expression parseExpressionList#void :
  {
    List<Expression> expressions;
  }
    < LPAREN > expressions = expList < RPAREN >
    {
      // Whereas ([Sales],[Time]) and () are tuples, ([Sales]) and (5)
      // are just expressions.
      return new CallExpressionR(
      "()", Type.PARENTHESES, expressions);
    }
  ;

  INJECT Tuple : implements AtomicExpression

  Expression Tuple :
  {
    List<Expression> expressions;
  }
    // set built from sets/tuples
    < LBRACE >
    (
      SCAN < RBRACE > =>
      {
        expressions = Collections.emptyList();
      }
      |
      expressions = expList
    )
    < RBRACE >
    {
      return new CallExpressionR(
      "{}", Type.BRACES, expressions);
    }
  ;

  Expression OnlyName#void :
    NameObjectIdentifier ASSERT ~(<BANG>|<LPAREN>) =>||
    {
        return (Expression) peekNode();
    }
  ;

  Expression parseMaybeBangMaybeFunctionCall#void :
    // Function call "foo(a, b)" or "whiz!bang!foo(a, b)".
    // Properties "x.PROP" and methods "exp.meth(a)" are in primary().
  {
    Expression expression;
    NameObjectIdentifier nameObjectIdentifier;
    List < Expression > expressions = null;
  }
    nameObjectIdentifier = NameObjectIdentifier
    (
      < BANG > 
      nameObjectIdentifier = NameObjectIdentifier
      {
      // We support the syntax for qualifying function names with package
      // names separated by bang ('!'), e.g. 'whiz!bang!foo(a, b)'
      // but currently we ignore the qualifiers. The previous example is
      // equivalent to 'foo(a, b)'.
      }
    )*
    (
      < LPAREN >
      (
        SCAN < RPAREN > =>
        {
          expressions = Collections.emptyList();
        }
        |
        expressions = expOrEmptyList
      )
      < RPAREN >
    )?
    {
      return createCall(null, nameObjectIdentifier, expressions);
    }
  ;

  INJECT AtomicExpression : extends PrimaryExpression

  Expression AtomicExpression#interface :
  {
    Expression expression;
  }
    (
      Literal {expression = (Expression) lastConsumedToken;}
      | 
      expression=CastExpression
      |
      expression=parseExpressionList
      | 
      expression=Tuple 
      | 
      expression = CaseExpression 
      |
      expression = OnlyName 
      |
      expression = parseMaybeBangMaybeFunctionCall
    )
    {
      return expression;
    }
  ;

  INJECT CaseExpression : implements AtomicExpression 

  Expression CaseExpression :
  {
    Expression expression, expression2;
    List < Expression > expressions = new ArrayList <> ();
    boolean match = false;
  }
    < CASE >
    (
      expression = Expression
      {
        match = true;
        expressions.add(expression);
      }
    )?
    (
      < WHEN > expression = Expression < THEN > expression2 = Expression
      {
        expressions.add(expression);
        expressions.add(expression2);
      }
    )*
    (
      < ELSE > expression = Expression
      {
        expressions.add(expression);
      }
    )?
    < END >
    {
      if (match)
      {
        return new CallExpressionR(
        "_CaseMatch", Type.TERM_CASE, expressions);
      }
      else
      {
        return new CallExpressionR(
        "_CaseTest", Type.TERM_CASE, expressions);
      }
    }
  ;

  INJECT FormulaExpression : implements org.eclipse.daanse.mdx.model.api.expression.FormulaExpression;

  FormulaExpression parseFormulaExpression#FormulaExpression :
    ObjectIdentifier < EQ > ObjectIdentifier
    {
      return CURRENT_NODE;
    }
  ;

  INJECT MemberPropertyDefinition :
    import org.eclipse.daanse.mdx.model.api.expression.Expression;
    import org.eclipse.daanse.mdx.model.api.expression.ObjectIdentifier;
    implements org.eclipse.daanse.mdx.model.api.select.MemberPropertyDefinition
  {
    public ObjectIdentifier objectIdentifier() {
        return (ObjectIdentifier) getChild(0);
   }

   public Expression expression() {
      return (Expression) getChild(2);
   }
}

MemberPropertyDefinition :
  ObjectIdentifier 
  < EQ > 
  Expression
;

