/*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*   SmartCity Jena - initial
*   Stefan Bischof (bipolis.org) - initial
*/

// https://docs.oracle.com/cd/E57185_01/ESBTR/mdx_syn_gram.html
// https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms717923(v=vs.85)
BASE_NAME = Mdx;
IGNORE_CASE = true;
PARSER_PACKAGE = org.eclipse.daanse.mdx.parser.cccx;
NODE_PACKAGE = org.eclipse.daanse.mdx.parser.cccx.tree;
TABS_TO_SPACES = 4;
ENSURE_FINAL_EOL;
SMART_NODE_CREATION=false;
COPYRIGHT_BLURB="\n*\n* Copyright (c) 2023 Contributors to the Eclipse Foundation.\n*\n* This program and the accompanying materials are made\n* available under the terms of the Eclipse Public License 2.0\n* which is available at https://www.eclipse.org/legal/epl-2.0/\n*\n* SPDX-License-Identifier: EPL-2.0\n*\n* Contributors: see corresponding .ccc file\n";
#if false
// We'll be able to use this instead in RC3
COPYRIGHT_BLURB="""
     *
     * Copyright (c) 2023 Contributors to the Eclipse Foundation.
     *
     * This program and the accompanying materials are made
     * available under the terms of the Eclipse Public License 2.0
     * which is available at https://www.eclipse.org/legal/epl-2.0/
     *
     * SPDX-License-Identifier: EPL-2.0
     *
     * Contributors: see corresponding .ccc file
     """;
#endif     

INJECT PARSER_CLASS :
  import java.util.List;
  import java.util.LinkedList;
  import java.io.File;
{
   public static void main(String[] args) {
      if (args.length==0) System.err.println("No input file specified.");
      else for (int i=0; i< args.length; i++) {
        System.out.println("Parsing file " + args[i]);
        try {
           parseFile(new File(args[i]), true);
        } catch (Exception e) {
          System.err.println("error parsing file: " + args[i]);
          e.printStackTrace();
        }
      }
   }

   public static void parseFile(File file, boolean dumpTree) throws IOException {
       if (!file.exists()) {
           System.err.println("File " + file + " does not exist.");
           return;
       }
       if (file.isDirectory()) {
           for (File f : file.listFiles()) {
              if (f.isFile() && f.getPath().endsWith(".mdx")) {
                parseFile(f, dumpTree);
              }
           }
           return;
       }
       PARSER_CLASS parser = new PARSER_CLASS(file.toPath());
       Node root = parser.MdxStatement();
       if (dumpTree) {
           root.dump("");
       }
   }
}  

INCLUDE "Lexer.inc.ccc"
INCLUDE "Expressions.inc.ccc"
INCLUDE "Statements.inc.ccc"
