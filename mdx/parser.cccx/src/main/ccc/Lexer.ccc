

COPYRIGHT_BLURB="\n*\n* Copyright (c) 2023 Contributors to the Eclipse Foundation.\n*\n* This program and the accompanying materials are made\n* available under the terms of the Eclipse Public License 2.0\n* which is available at https://www.eclipse.org/legal/epl-2.0/\n*\n* SPDX-License-Identifier: EPL-2.0\n*\n* Contributors: see corresponding .ccc file\n";

TOKEN :
  < AND : "AND" >
| < AS : "AS" >
| < AXIS : "AXIS" >
| < BEGIN : "BEGIN" >
| < BY : "BY" >
| < CASE : "CASE" >
| < CALCULATION : "CALCULATION" >
| < CAST : "CAST" >
| < CELL : "CELL" >
| < CHAPTERS : "CHAPTERS" >
| < CREATE : "CREATE" >
| < COLUMNS : "COLUMNS" >
| < COMMIT : "COMMIT" >
| < CUBE : "CUBE" >
| < CURRENTCUBE : "CURRENTCUBE" >
| < DIMENSION : "DIMENSION" >
| < DRILLTHROUGH : "DRILLTHROUGH" >
| < ELSE : "ELSE" >
| < EMPTY : "EMPTY" >
| < END : "END" >
| < EXPLAIN : "EXPLAIN" >
| < FIRSTROWSET : "FIRSTROWSET" >
| < FOR : "FOR" >
| < FROM : "FROM" >
| < IN : "IN" >
| < IS : "IS" >
| < MATCHES : "MATCHES" >
| < MAXROWS : "MAXROWS" >
| < MEMBER : "MEMBER" >
| < MEASURE : "MEASURE" >
| < NON : "NON" >
| < NOT : "NOT" >
| < NULL : "NULL" > #NullLiteral
| < ON : "ON" >
| < OR : "OR" >
| < PAGES : "PAGES" >
| < PLAN : "PLAN" >
| < PROPERTIES : "PROPERTIES" >
| < REFRESH : "REFRESH" >
| < RETURN : "RETURN" >
| < ROLLBACK : "ROLLBACK" >
| < ROWS : "ROWS" >
| < SECTIONS : "SECTIONS" >
| < SELECT : "SELECT" >
| < SESSION : "SESSION" >
| < SET : "SET" >
| < THEN : "THEN" >
| < TRAN : "TRAN" >
| < TRANSACTION : "TRANSACTION" >
| < UPDATE : "UPDATE" >
| < USE_EQUAL_ALLOCATION : "USE_EQUAL_ALLOCATION" >
| < USE_EQUAL_INCREMENT : "USE_EQUAL_INCREMENT" >
| < USE_WEIGHTED_ALLOCATION : "USE_WEIGHTED_ALLOCATION" >
| < USE_WEIGHTED_INCREMENT : "USE_WEIGHTED_INCREMENT" >
| < WHEN : "WHEN" >
| < WHERE : "WHERE" >
| < XOR : "XOR" >
| < WITH : "WITH" >
| < EXISTING : "EXISTING" >
| < SYSTEM_CUBE : "$SYSTEM" >
;


// White space
SKIP :
  " "
| "\t"
| "\n"
| "\r"
| "\f"
;


/*
 * Comments
 * https://javacc.github.io/javacc/documentation/bnf.html#comments
 * additional --
 */

< DEFAULT >
MORE :
  "//" : IN_SINGLE_LINE_COMMENT
| < "/**" ~[ "/" ] > : IN_FORMAL_COMMENT
| "--" : IN_SINGLE_LINE_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
;


< IN_SINGLE_LINE_COMMENT >
UNPARSED :
  < SINGLE_LINE_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
;


< IN_FORMAL_COMMENT >
UNPARSED :
  < FORMAL_COMMENT : "*/" > : DEFAULT
;


< IN_MULTI_LINE_COMMENT >
UNPARSED :
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
;


< IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT >
MORE :
  < ~[ ] >
;


/*
 * Separators
 */
< DEFAULT >
TOKEN :
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < DOT : "." >
;


/*
 * Operators
 */
< DEFAULT >
TOKEN :
  < ASTERISK : "*" >
| < BANG : "!" >
| < COLON : ":" >
| < CONCAT : "||" >
| < EQ : "=" >
| < GE : ">=" >
| < GT : ">" >
| < LE : "<=" >
| < LT : "<" >
| < MINUS : "-" >
| < NE : "<>" >
| < PLUS : "+" >
| < SOLIDUS : "/" >
| < ATSIGN : "@" >
;

INCLUDE JAVA_IDENTIFIER_DEF
/*
 * Identifiers
 * - https://javacc.github.io/javacc/documentation/bnf.html#identifiers
 */

TOKEN #Identifier :
  < ID : <JAVA_IDENTIFIER_START> (<JAVA_IDENTIFIER_PART>)* > 
  |
  < QUOTED_ID :
    < LBRACKET >
    (
      (~[ "]", "\n", "\r" ])
    | ("]]")
    )*
    < RBRACKET >
  >
  |
  < AMP_QUOTED_ID : "&" < QUOTED_ID > >
  |
  < AMP_UNQUOTED_ID :
    "&" [ "a"-"z", "A"-"Z" ]
    ( <JAVA_IDENTIFIER_PART> )*
  >
;

TOKEN #NumericLiteral :
  < UNSIGNED_INTEGER_LITERAL : ([ "0"-"9" ])+ >
  |
  < APPROX_NUMERIC_LITERAL :
    (
      < UNSIGNED_INTEGER_LITERAL >
      | 
      < DECIMAL_NUMERIC_LITERAL >
    )
    < EXPONENT > 
  > 
  |
  < DECIMAL_NUMERIC_LITERAL :
    ([ "0"-"9" ])+ (".")? ([ "0"-"9" ])*
  | "." ([ "0"-"9" ])+
  > 
  |
  // This does not seem to be used! (JR)
  < FLOATING_POINT_LITERAL :
    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ]
  >
  |
  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
;

TOKEN #StringLiteral : 
  < SINGLE_QUOTED_STRING :
    "'"
    (
      (~[ "'" ])
    | ("''")
    )*
    "'" >
  |
  < DOUBLE_QUOTED_STRING :
    "\""
    (
      (~[ "\"" ])
    | ("\"\"")
    )*
    "\"" 
  >
;

INJECT ASTStringLiteral :
   import static PARSER_PACKAGE.PARSER_CLASS.stripQuotes;
   implements org.eclipse.daanse.mdx.model.api.expression.StringLiteral 
{
   @Property String value;
   public String value() {
      return getValue();
   }

   public void close() {
      String image = getImage();
      if (image.charAt(0) == '\'') 
         value = stripQuotes(image, "'", "'", "''");
      else 
         value = stripQuotes(image, "\"", "\"", "\"\"");
   }
}

INJECT ASTNumericLiteral : 
  import java.math.BigDecimal;
  implements org.eclipse.daanse.mdx.model.api.expression.NumericLiteral
{
   public BigDecimal value() {
      return new BigDecimal(getImage());
   }
}

INJECT ASTNullLiteral : implements org.eclipse.daanse.mdx.model.api.expression.NullLiteral;
