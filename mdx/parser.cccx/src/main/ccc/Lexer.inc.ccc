/*
* Copyright (c) 2023 Contributors to the Eclipse Foundation.
*
* This program and the accompanying materials are made
* available under the terms of the Eclipse Public License 2.0
* which is available at https://www.eclipse.org/legal/epl-2.0/
*
* SPDX-License-Identifier: EPL-2.0
*
* Contributors:
*   SmartCity Jena - initial
*   Stefan Bischof (bipolis.org) - initial
*/

// White space
SKIP : " " | "\t" | "\n" | "\r" | "\f" ;

INJECT PARSER_CLASS :
{
   /**
    * Set whether the parser recognizes nested multiline comments
    */
   public void allowNestedComments(boolean allow) {
      token_source.setAllowNestedComments(allow);
   }

   /**
    * Strip the opening/closing quote characters
    * and also unescapes the doubled quote characters
    * in the string.
    */
   public static String stripQuotes(String s) {
      if (s.length() == 2) return "";
      char quoteChar = s.charAt(0);
      s = s.substring(1, s.length());
      int numQuoteChars = 0;
      if (s.indexOf(quoteChar) >=0) {
         StringBuilder buf = new StringBuilder();
         for (int i = 0; i< s.length(); i++) {
            char c = s.charAt(i);
            if (c != quoteChar) buf.append(c);
            else {
              ++numQuoteChars;
              if (numQuoteChars % 2 == 1) buf.append(quoteChar);
            }
            s = buf.toString();
         }
      }
      return s;
	  }
}

INJECT LEXER_CLASS :
{
  // It seems that multiline comments can nest 
  // in MDX. So we have this little TOKEN_HOOK
  // and these variables where we keep track
  // of the nesting levels of the comments and
  // where the outermost comment began.
  private int commentNesting, commentStartOffset;
  private boolean allowNestedComments=true;

  void setAllowNestedComments(boolean allowNestedComments) {
      this.allowNestedComments = allowNestedComments;
      if (!allowNestedComments && commentNesting > 1) commentNesting = 1;
  }

  private BASE_TOKEN_CLASS TOKEN_HOOK(BASE_TOKEN_CLASS tok) {
    if (tok.getType() == SLASH_STAR) {
      if (commentNesting==0) {
        commentStartOffset=tok.getBeginOffset();
      } else {
        tok.setBeginOffset(commentStartOffset);
      }
      ++commentNesting;
      if (!allowNestedComments) commentNesting = 1;
    }
    else if (tok.getType() == MULTI_LINE_COMMENT) {
      --commentNesting;
      tok.setBeginOffset(commentStartOffset);
      if (commentNesting > 0) {
         switchTo(LexicalState.IN_MULTI_LINE_COMMENT);
      } 
    }
    // If we hit EOF but commentNesting is > 0, 
    // we obviously have a problem!
    else if (tok.getType() == EOF && commentNesting !=0) {
      tok.setBeginOffset(commentStartOffset);
      tok.setType(INVALID);
    }
    return tok;
  }
}

UNPARSED #Comment : 
  < SINGLE_LINE_COMMENT : ("//" | "--") (~["\n"])* "\n" > #SingleLineComment
;

<DEFAULT, IN_MULTI_LINE_COMMENT>
UNPARSED #Comment :
  <SLASH_STAR : "/*"> : IN_MULTI_LINE_COMMENT
;

< IN_MULTI_LINE_COMMENT >
UNPARSED #Comment :
  < MULTI_LINE_COMMENT : "*/" > #MultiLineComment : DEFAULT
;

< IN_MULTI_LINE_COMMENT >
SKIP :
  < ~[ ] >
;

/*
 * Separators
 */
< DEFAULT >
TOKEN #Separator :
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < COMMA : "," >
| < SEMICOLON : ";" >
| < DOT : "." >
;

TOKEN #Keyword:
  < ABSOLUTE : "ABSOLUTE" >
| < ACTIONPARAMETERSET : "ACTIONPARAMETERSET" >
| < ADDCALCULATEDMEMBERS : "ADDCALCULATEDMEMBERS" > 
| < AFTER : "AFTER" >
| < AGGREGATE : "AGGREGATE" >
| < ALL : "ALL" >
| < ALLMEMBERS : "ALLMEMBERS" >
| < ANCESTOR : "ANCESTOR" >
| < ANCESTORS : "ANCESTORS" >
| < AND : "AND" >
| < AS : "AS" >
| < ASC : "ASC" >
| < ASCENDANTS : "ASCENDANTS" >
| < AVERAGE : "AVERAGE" >
| < AXIS : "AXIS" >
| < BASC : "BASC" >
| < BDESC : "BDESC" >
| < BEFORE : "BEFORE" >
| < BEFORE_AND_AFTER : "BEFORE_AND_AFTER" >
| < BEGIN : "BEGIN" >
| < BOTTOMCOUNT : "BOTTOMCOUNT" >
| < BOTTOMPERCENT : "BOTTOMPERCENT" >
| < BOTTOMSUM : "BOTTOMSUM" >
| < BY : "BY" >
| < CACHE : "CACHE" >
| < CASE : "CASE" >
| < CALCULATE : "CALCULATE" >
| < CALCULATION : "CALCULATION" >
| < CALCULATIONCURRENTPASS : "CALCULATIONCURRENTPASS" >
| < CALCULATIONPASSVALUE : "CALCULATIONPASSVALUE" >
| < CALCULATIONS : "CALCULATIONS" >
| < CALL : "CALL" >
| < CAST : "CAST" >
| < CELL : "CELL" >
| < CELLFORMULASETLIST : "CELLFORMULASETLIST" >
| < CHAPTERS : "CHAPTERS" >
| < CHILDREN : "CHILDREN" >
| < CLEAR : "CLEAR" >
| < CLOSINGPERIOD : "CLOSINGPERIOD" >
| < COALESCEEMPTY : "COALESCEEMPTY" >
| < COLUMN : "COLUMN" >
| < COLUMNS : "COLUMNS" >
| < CORRELATION : "CORRELATION" >
| < COUNT : "COUNT" >
| < COUSIN : "COUSIN" >
| < COVARIANCE : "COVARIANCE" >
| < COVARIANCEN : "COVARIANCEN" >
| < CREATE : "CREATE" >
| < CREATEPROPERTYSET : "CREATEPROPERTYSET" >
| < CREATEVIRTUALDIMENSION : "CREATEVIRTUALDIMENSION" >
| < COMMIT : "COMMIT" >
| < CROSSJOIN : "CROSSJOIN" >
| < CUBE : "CUBE" >
| < CURRENT : "CURRENT" >
| < CURRENTCUBE : "CURRENTCUBE" >
| < CURRENTMEMBER : "CURRENTMEMBER" >
| < DEFAULTMEMBER : "DEFAULTMEMBER" >
| < DEFAULT_MEMBER : "DEFAULT_MEMBER" >
| < DESC : "DESC" >
| < DESCENDANTS : "DESCENDANTS" >
| < DESCRIPTION : "DESCRIPTION" >
| < DIMENSION : "DIMENSION" >
| < DIMENSIONS : "DIMENSIONS" >
| < DISTINCT : "DISTINCT" >
| < DISTINCTCOUNT : "DISTINCTCOUNT" >
| < DRILLDOWNLEVEL : "DRILLDOWNLEVEL" >
| < DRILLDOWNLEVELBOTTOM : "DRILLDOWNLEVELBOTTOM" >
| < DRILLDOWNLEVELTOP : "DRILLDOWNLEVELTOP" >
| < DRILLDOWNMEMBER : "DRILLDOWNMEMBER" >
| < DRILLDOWNMEMBERBOTTOM : "DRILLDOWNMEMBERBOTTOM" >
| < DRILLDOWNMEMBERTOP : "DRILLDOWNMEMBERTOP" >
| < DRILLUPLEVEL : "DRILLUPLEVEL" >
| < DRILLUPMEMBER : "DRILLUPMEMBER" >
| < DRILLTHROUGH : "DRILLTHROUGH" >
| < DROP : "DROP" >
| < ELSE : "ELSE" >
| < EMPTY : "EMPTY" >
| < END : "END" >
| < ERROR : "ERROR" >
| < EXCEPT : "EXCEPT" >
| < EXCLUDEEMPTY : "EXCLUDEEMPTY" >
| < EXISTING : "EXISTING" >
| < EXPLAIN : "EXPLAIN" >
| < EXTRACT : "EXTRACT" >
| < FALSE : "FALSE" >
| < FILTER : "FILTER" >
| < FIRSTCHILD : "FIRSTCHILD" >
| < FIRSTSIBLING : "FIRSTSIBLING" >
| < FIRSTROWSET : "FIRSTROWSET" >
| < FOR : "FOR" >
| < FREEZE : "FREEZE" >
| < FROM : "FROM" >
| < GENERATE : "GENERATE" >
| < GLOBAL : "GLOBAL" >
| < GROUP : "GROUP" >
| < GROUPING : "GROUPING" >
| < HEAD : "HEAD" >
| < HIDDEN : "HIDDEN" >
| < HIERARCHIZE : "HIERARCHIZE" >
| < HIERARCHY : "HIERARCHY" >
| < IGNORE : "IGNORE" >
| < IIF : "IIF" >
| < IN : "IN" >
| < INCLUDEEMPTY : "INCLUDEEMPTY" >
| < INDEX : "INDEX" >
| < INTERSECT : "INTERSECT" >
| < IS : "IS" >
| < ISANCESTOR : "ISANCESTOR" >
| < ISEMPTY : "ISEMPTY" >
| < ISGENERATION : "ISGENERATION" >
| < ISLEAF : "ISLEAF" >
| < ISSIBLING : "ISSIBLING" >
| < ITEM : "ITEM" >
| < LAG : "LAG" >
| < LASTCHILD : "LASTCHILD" >
| < LASTPERIODS : "LASTPERIODS" >
| < LASTSIBLING : "LASTSIBLING" >
| < LEAD : "LEAD" >
| < LEAVES : "LEAVES" >
| < LEVEL : "LEVEL" >
| < LEVELS : "LEVELS" >
| < LINKMEMBER : "LINKMEMBER" >
| < LINREGINTERCEPT : "LINKMEMBER" >
| < LINREGPOINT : "LINREGPOINT" >
| < LINREGR2 : "LINREGR2" >
| < LINREGSLOPE : "LINREGSLOPE" >
| < LINREGVARIANCE : "LINREGVARIANCE" >
| < LOOKUPCUBE : "LOOKUPCUBE" >
| < MATCHES : "MATCHES" >
| < MAX : "MAX" >
| < MAXROWS : "MAXROWS" >
| < MEASURE : "MEASURE" >
| < MEDIAN : "MEDIAN" >
| < MEMBER : "MEMBER" >
| < MEMBERS : "MEMBERS" >
| < MEMBERTOSTR : "MEMBERTOSTR" >
| < MIN : "MIN" >
| < MTD : "MTD" >
| < NAME : "NAME" >
| < NAMETOSET : "NAMETOSET" >
| < NEST : "NEST" >
| < NEXTMEMBER : "NEXTMEMBER" >
| < NO_ALLOCATION : "NO_ALLOCATION" >
| < NO_PROPERTIES : "NO_PROPERTIES" >
| < NON : "NON" >
| < NONEMPTYCROSSJOIN : "NONEMPTYCROSSJOIN" >
| < NOT : "NOT" >
| < NOT_RELATED_TO_FACTS : "NOT_RELATED_TO_FACTS" >
| < NULL : "NULL" > #NullLiteral
| < ON : "ON" >
| < OPENINGPERIOD : "OPENINGPERIOD" >
| < OR : "OR" >
| < PAGES : "PAGES" >
| < PARALLELPERIOD : "PARALLELPERIOD" >
| < PARENT : "PARENT" >
| < PASS : "PASS" >
| < PERIODSTODATE : "PERIODSTODATE" >
| < PLAN : "PLAN" >
| < POST : "POST" >
| < PREDICT : "PREDICT" >
| < PREVMEMBER : "PREVMEMBER" >
| < PROPERTIES : "PROPERTIES" >
| < PROPERTY : "PROPERTY" >
| < QTD : "QTD" >
| < RANK : "RANK" >
| < RECURSIVE : "RECURSIVE" >
| < REFRESH : "REFRESH" >
| < RELATIVE : "RELATIVE" >
| < RETURN : "RETURN" >
| < ROLLBACK : "ROLLBACK" >
| < ROLLUPCHILDREN : "ROLLUPCHILDREN" >
| < ROOT : "ROOT" >
| < ROWS : "ROWS" >
| < SCOPE : "SCOPE" >
| < SECTIONS : "SECTIONS" >
| < SELECT : "SELECT" >
| < SELF : "SELF" >
| < SELF_AND_AFTER : "SELF_AND_AFTER" >
| < SELF_AND_BEFORE : "SELF_AND_BEFORE" >
| < SELF_BEFORE_AFTER : "SELF_BEFORE_AFTER" >
| < SESSION : "SESSION" >
| < SET : "SET" >
| < SETTOARRAY : "SETTOARRAY" >
| < SETTOSTR : "SETTOSTR" >
| < SORT : "SORT" >
| < STDDEV : "STDDEV" >
| < STDDEVP : "STDDEVP" >
| < STDEV : "STDEV" >
| < STDEVP : "STDEVP" >
| < STORAGE : "STORAGE" >
| < STRIPCALCULATEDMEMBERS : "STRIPCALCULATEDMEMBERS" >
| < STRTOMEMBER : "STRTOMEMBER" >
| < STRTOSET : "STRTOSET" >
| < STRTOTUPLE : "STRTOTUPLE" >
| < STRTOVAL : "STRTOVAL" >
| < STRTOVALUE : "STRTOVALUE" >
| < SUBSET : "SUBSET" >
| < SUM : "SUM" >
| < TAIL : "TAIL" >
| < THEN : "THEN" >
| < THIS : "THIS" >
| < TOGGLEDRILLSTATE : "TOGGLEDRILLSTATE" >
| < TOPCOUNT : "TOPCOUNT" >
| < TOPPERCENT : "TOPPERCENT" >
| < TOPSUM : "TOPSUM" >
| < TRAN : "TRAN" >
| < TRANSACTION : "TRANSACTION" >
| < UNION : "UNION" >
| < UNIQUE : "UNIQUE" >
| < UNIQUENAME : "UNIQUENAME" >
| < UPDATE : "UPDATE" >
| < USE : "USE" >
| < USE_EQUAL_ALLOCATION : "USE_EQUAL_ALLOCATION" >
| < USE_EQUAL_INCREMENT : "USE_EQUAL_INCREMENT" >
| < USE_WEIGHTED_ALLOCATION : "USE_WEIGHTED_ALLOCATION" >
| < USE_WEIGHTED_INCREMENT : "USE_WEIGHTED_INCREMENT" >
| < USERNAME : "USERNAME" >
| < VALIDMEASURE : "VALIDMEASURE" >
| < VALUE : "VALUE" >
| < VAR: "VAR" >
| < VARIANCE : "VARIANCE" >
| < VARIANCEP : "VARIANCEP" >
| < VARP : "VARP" >
| < VISUAL : "VISUAL" >
| < VISUALTOTALS : "VISUALTOTALS" >
| < WHEN : "WHEN" >
| < WHERE : "WHERE" >
| < WTD : "WTD" >
| < XOR : "XOR" >
| < WITH : "WITH" >
| < TOTALS : "TOTALS" >
| < TREE : "TREE" >
| < TRUE : "TRUE" >
| < TUPLETOSTR : "TUPLETOSTR" >
| < TYPE : "TYPE" >
| < YTD : "YTD" >
| < SYSTEM_CUBE : "$SYSTEM" >
;




/*
 * Operators
 */
< DEFAULT >
TOKEN #Operator :
  < ASTERISK : "*" >
| < BANG : "!" >
| < COLON : ":" >
| < CONCAT : "||" >
| < EQ : "=" >
| < GE : ">=" >
| < GT : ">" >
| < LE : "<=" >
| < LT : "<" >
| < MINUS : "-" >
| < NE : "<>" >
| < PLUS : "+" >
| < SOLIDUS : "/" >
| < ATSIGN : "@" >
;

INCLUDE JAVA_IDENTIFIER_DEF
/*
 * Identifiers
 * - https://javacc.github.io/javacc/documentation/bnf.html#identifiers
 */

TOKEN #IdToken :
  < ID : <JAVA_IDENTIFIER_START> (<JAVA_IDENTIFIER_PART>)* > 
  |
  < QUOTED_ID :
    < LBRACKET >
    (
      (~[ "]", "\n", "\r" ])
    | ("]]")
    )*
    < RBRACKET >
  >
  |
  < AMP_QUOTED_ID : "&" < QUOTED_ID > >
  |
  < AMP_UNQUOTED_ID :
    "&" [ "a"-"z", "A"-"Z" ]
    ( <JAVA_IDENTIFIER_PART> )*
  >
  |
  // Neither the Microsoft spec the Oracle spec makes any mention of this!
  < AT_ID : "@" <ID> > 
;

INJECT IdToken :
   import static PARSER_PACKAGE.PARSER_CLASS.stripQuotes;
   implements NameObjectIdentifier
{
   private Quoting quoting;
   private String name;

   public Quoting quoting() {
       if (quoting == null) {
          quoting = getImage().charAt(0) == '[' ? Quoting.QUOTED : Quoting.UNQUOTED;
       }
       return quoting;
   }

   public String name() {
      if (name == null) {
         String image = getImage();
         name = quoting() == Quoting.QUOTED  ? stripQuotes(image) : image;
      }
      return name;
   }

   public String value() {
       return name();
   }

}   

TOKEN #NumericLiteral :
  < UNSIGNED_INTEGER_LITERAL : ([ "0"-"9" ])+ >
  |
  < APPROX_NUMERIC_LITERAL :
    (
      < UNSIGNED_INTEGER_LITERAL >
      | 
      < DECIMAL_NUMERIC_LITERAL >
    )
    < EXPONENT > 
  > 
  |
  < DECIMAL_NUMERIC_LITERAL :
    ([ "0"-"9" ])+ (".")? ([ "0"-"9" ])*
  | "." ([ "0"-"9" ])+
  > 
  |
  < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
;

TOKEN : 
  < STRING_LITERAL : <SINGLE_QUOTED_STRING> | <DOUBLE_QUOTED_STRING> > #StringLiteral
  |
  < #SINGLE_QUOTED_STRING :
    "'"
    (
      (~[ "'" ])
    | ("''")
    )*
    "'" 
  >
  |
  < #DOUBLE_QUOTED_STRING :
    "\""
    (
      (~[ "\"" ])
    | ("\"\"")
    )*
    "\"" 
  >
;

INJECT StringLiteral :
   import static PARSER_PACKAGE.PARSER_CLASS.stripQuotes;
   implements Literal, org.eclipse.daanse.mdx.model.api.expression.StringLiteral 
{
   private String value;

   public String value() {
      if (value == null) value = stripQuotes(getImage());
      return value;
   }
}

INJECT NumericLiteral : 
  import java.math.BigDecimal;
  implements Literal, org.eclipse.daanse.mdx.model.api.expression.NumericLiteral
{
   public BigDecimal value() {
      return new BigDecimal(getImage());
   }
}

INJECT NullLiteral : implements Literal, org.eclipse.daanse.mdx.model.api.expression.NullLiteral;